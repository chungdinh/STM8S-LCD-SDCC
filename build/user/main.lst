                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _delay_ms
                                     13 	.globl _delay_us
                                     14 	.globl _GPIO_WriteLow
                                     15 	.globl _GPIO_WriteHigh
                                     16 	.globl _GPIO_Write
                                     17 	.globl _GPIO_Init
                                     18 	.globl _LCD_STR
                                     19 	.globl _initLCD
                                     20 	.globl _LCD_DATA
                                     21 	.globl _LCD_NYB
                                     22 	.globl _LCD_LINE
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DATA
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area INITIALIZED
                                     31 ;--------------------------------------------------------
                                     32 ; Stack segment in internal ram 
                                     33 ;--------------------------------------------------------
                                     34 	.area	SSEG
      000000                         35 __start__stack:
      000000                         36 	.ds	1
                                     37 
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DABS (ABS)
                                     42 ;--------------------------------------------------------
                                     43 ; interrupt vector 
                                     44 ;--------------------------------------------------------
                                     45 	.area HOME
      000000                         46 __interrupt_vect:
      000000 82v00u00u00             47 	int s_GSINIT ;reset
      000004 82 00 00 00             48 	int 0x0000 ;trap
      000008 82 00 00 00             49 	int 0x0000 ;int0
      00000C 82 00 00 00             50 	int 0x0000 ;int1
      000010 82 00 00 00             51 	int 0x0000 ;int2
      000014 82 00 00 00             52 	int 0x0000 ;int3
      000018 82 00 00 00             53 	int 0x0000 ;int4
      00001C 82 00 00 00             54 	int 0x0000 ;int5
      000020 82 00 00 00             55 	int 0x0000 ;int6
      000024 82 00 00 00             56 	int 0x0000 ;int7
      000028 82 00 00 00             57 	int 0x0000 ;int8
      00002C 82 00 00 00             58 	int 0x0000 ;int9
      000030 82 00 00 00             59 	int 0x0000 ;int10
      000034 82 00 00 00             60 	int 0x0000 ;int11
      000038 82 00 00 00             61 	int 0x0000 ;int12
      00003C 82 00 00 00             62 	int 0x0000 ;int13
      000040 82 00 00 00             63 	int 0x0000 ;int14
      000044 82 00 00 00             64 	int 0x0000 ;int15
      000048 82 00 00 00             65 	int 0x0000 ;int16
      00004C 82 00 00 00             66 	int 0x0000 ;int17
      000050 82 00 00 00             67 	int 0x0000 ;int18
      000054 82 00 00 00             68 	int 0x0000 ;int19
      000058 82 00 00 00             69 	int 0x0000 ;int20
      00005C 82 00 00 00             70 	int 0x0000 ;int21
      000060 82 00 00 00             71 	int 0x0000 ;int22
      000064 82 00 00 00             72 	int 0x0000 ;int23
      000068 82 00 00 00             73 	int 0x0000 ;int24
      00006C 82 00 00 00             74 	int 0x0000 ;int25
      000070 82 00 00 00             75 	int 0x0000 ;int26
      000074 82 00 00 00             76 	int 0x0000 ;int27
      000078 82 00 00 00             77 	int 0x0000 ;int28
      00007C 82 00 00 00             78 	int 0x0000 ;int29
                                     79 ;--------------------------------------------------------
                                     80 ; global & static initialisations
                                     81 ;--------------------------------------------------------
                                     82 	.area HOME
                                     83 	.area GSINIT
                                     84 	.area GSFINAL
                                     85 	.area GSINIT
      000000                         86 __sdcc_gs_init_startup:
      000000                         87 __sdcc_init_data:
                                     88 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   89 	ldw x, #l_DATA
      000003 27 07            [ 1]   90 	jreq	00002$
      000005                         91 00001$:
      000005 72 4FuFFuFF      [ 1]   92 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   93 	decw x
      00000A 26 F9            [ 1]   94 	jrne	00001$
      00000C                         95 00002$:
      00000C AEr00r00         [ 2]   96 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   97 	jreq	00004$
      000011                         98 00003$:
      000011 D6uFFuFF         [ 1]   99 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  100 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  101 	decw	x
      000018 26 F7            [ 1]  102 	jrne	00003$
      00001A                        103 00004$:
                                    104 ; stm8_genXINIT() end
                                    105 	.area GSFINAL
      000000 CCr00r80         [ 2]  106 	jp	__sdcc_program_startup
                                    107 ;--------------------------------------------------------
                                    108 ; Home
                                    109 ;--------------------------------------------------------
                                    110 	.area HOME
                                    111 	.area HOME
      000080                        112 __sdcc_program_startup:
      000080 CCr00r24         [ 2]  113 	jp	_main
                                    114 ;	return from main will return to caller
                                    115 ;--------------------------------------------------------
                                    116 ; code
                                    117 ;--------------------------------------------------------
                                    118 	.area CODE
                                    119 ;	lib/inc/delay.h: 1: void delay_us(int time){
                                    120 ;	-----------------------------------------
                                    121 ;	 function delay_us
                                    122 ;	-----------------------------------------
      000000                        123 _delay_us:
      000000 89               [ 2]  124 	pushw	x
                                    125 ;	lib/inc/delay.h: 2: while(time--){
      000001 1E 05            [ 2]  126 	ldw	x, (0x05, sp)
      000003                        127 00101$:
      000003 1F 01            [ 2]  128 	ldw	(0x01, sp), x
      000005 5A               [ 2]  129 	decw	x
      000006 16 01            [ 2]  130 	ldw	y, (0x01, sp)
      000008 26 F9            [ 1]  131 	jrne	00101$
      00000A 85               [ 2]  132 	popw	x
      00000B 81               [ 4]  133 	ret
                                    134 ;	lib/inc/delay.h: 6: void delay_ms(int time){
                                    135 ;	-----------------------------------------
                                    136 ;	 function delay_ms
                                    137 ;	-----------------------------------------
      00000C                        138 _delay_ms:
      00000C 89               [ 2]  139 	pushw	x
                                    140 ;	lib/inc/delay.h: 7: while(time--){
      00000D 1E 05            [ 2]  141 	ldw	x, (0x05, sp)
      00000F                        142 00101$:
      00000F 1F 01            [ 2]  143 	ldw	(0x01, sp), x
      000011 5A               [ 2]  144 	decw	x
      000012 16 01            [ 2]  145 	ldw	y, (0x01, sp)
      000014 27 0C            [ 1]  146 	jreq	00104$
                                    147 ;	lib/inc/delay.h: 8: delay_us(1000);
      000016 89               [ 2]  148 	pushw	x
      000017 4B E8            [ 1]  149 	push	#0xe8
      000019 4B 03            [ 1]  150 	push	#0x03
      00001B CDr00r00         [ 4]  151 	call	_delay_us
      00001E 85               [ 2]  152 	popw	x
      00001F 85               [ 2]  153 	popw	x
      000020 20 ED            [ 2]  154 	jra	00101$
      000022                        155 00104$:
      000022 85               [ 2]  156 	popw	x
      000023 81               [ 4]  157 	ret
                                    158 ;	user/main.c: 15: int main(void) {
                                    159 ;	-----------------------------------------
                                    160 ;	 function main
                                    161 ;	-----------------------------------------
      000024                        162 _main:
                                    163 ;	user/main.c: 17: GPIO_Init(LCD_PORT, GPIO_PIN_ALL, GPIO_MODE_OUT_PP_LOW_FAST);
      000024 4B E0            [ 1]  164 	push	#0xe0
      000026 4B FF            [ 1]  165 	push	#0xff
      000028 4B 0F            [ 1]  166 	push	#0x0f
      00002A 4B 50            [ 1]  167 	push	#0x50
      00002C CDr00r00         [ 4]  168 	call	_GPIO_Init
      00002F 5B 04            [ 2]  169 	addw	sp, #4
                                    170 ;	user/main.c: 18: GPIO_Init(LCD_PORT1, GPIO_PIN_ALL, GPIO_MODE_OUT_PP_LOW_FAST);
      000031 4B E0            [ 1]  171 	push	#0xe0
      000033 4B FF            [ 1]  172 	push	#0xff
      000035 4B 0A            [ 1]  173 	push	#0x0a
      000037 4B 50            [ 1]  174 	push	#0x50
      000039 CDr00r00         [ 4]  175 	call	_GPIO_Init
      00003C 5B 04            [ 2]  176 	addw	sp, #4
                                    177 ;	user/main.c: 19: initLCD();
      00003E CDr00r84         [ 4]  178 	call	_initLCD
                                    179 ;	user/main.c: 20: LCD_LINE(1);
      000041 4B 01            [ 1]  180 	push	#0x01
      000043 CDr01r5B         [ 4]  181 	call	_LCD_LINE
      000046 84               [ 1]  182 	pop	a
                                    183 ;	user/main.c: 21: LCD_STR("Chung Dinh");
      000047 AEr01r80         [ 2]  184 	ldw	x, #___str_0+0
      00004A 89               [ 2]  185 	pushw	x
      00004B CDr00r70         [ 4]  186 	call	_LCD_STR
      00004E 85               [ 2]  187 	popw	x
                                    188 ;	user/main.c: 22: delay_ms(100);
      00004F 4B 64            [ 1]  189 	push	#0x64
      000051 4B 00            [ 1]  190 	push	#0x00
      000053 CDr00r0C         [ 4]  191 	call	_delay_ms
      000056 85               [ 2]  192 	popw	x
                                    193 ;	user/main.c: 23: LCD_LINE(2);
      000057 4B 02            [ 1]  194 	push	#0x02
      000059 CDr01r5B         [ 4]  195 	call	_LCD_LINE
      00005C 84               [ 1]  196 	pop	a
                                    197 ;	user/main.c: 24: LCD_STR("12/05/1994");
      00005D AEr01r8B         [ 2]  198 	ldw	x, #___str_1+0
      000060 89               [ 2]  199 	pushw	x
      000061 CDr00r70         [ 4]  200 	call	_LCD_STR
      000064 85               [ 2]  201 	popw	x
                                    202 ;	user/main.c: 25: delay_ms(100);
      000065 4B 64            [ 1]  203 	push	#0x64
      000067 4B 00            [ 1]  204 	push	#0x00
      000069 CDr00r0C         [ 4]  205 	call	_delay_ms
      00006C 85               [ 2]  206 	popw	x
                                    207 ;	user/main.c: 26: while(1);
      00006D                        208 00102$:
      00006D 20 FE            [ 2]  209 	jra	00102$
      00006F 81               [ 4]  210 	ret
                                    211 ;	user/main.c: 28: void LCD_STR(const unsigned char *text){
                                    212 ;	-----------------------------------------
                                    213 ;	 function LCD_STR
                                    214 ;	-----------------------------------------
      000070                        215 _LCD_STR:
                                    216 ;	user/main.c: 29: while(*text){
      000070 1E 03            [ 2]  217 	ldw	x, (0x03, sp)
      000072                        218 00101$:
      000072 F6               [ 1]  219 	ld	a, (x)
      000073 4D               [ 1]  220 	tnz	a
      000074 26 01            [ 1]  221 	jrne	00115$
      000076 81               [ 4]  222 	ret
      000077                        223 00115$:
                                    224 ;	user/main.c: 30: LCD_DATA(*(text++),1);
      000077 5C               [ 2]  225 	incw	x
      000078 89               [ 2]  226 	pushw	x
      000079 4B 01            [ 1]  227 	push	#0x01
      00007B 88               [ 1]  228 	push	a
      00007C CDr00rEB         [ 4]  229 	call	_LCD_DATA
      00007F 85               [ 2]  230 	popw	x
      000080 85               [ 2]  231 	popw	x
      000081 20 EF            [ 2]  232 	jra	00101$
      000083 81               [ 4]  233 	ret
                                    234 ;	user/main.c: 33: void initLCD(void){
                                    235 ;	-----------------------------------------
                                    236 ;	 function initLCD
                                    237 ;	-----------------------------------------
      000084                        238 _initLCD:
                                    239 ;	user/main.c: 34: GPIO_WriteLow(LCD_PORT1,LCD_E); //clear enable
      000084 4B 80            [ 1]  240 	push	#0x80
      000086 4B 0A            [ 1]  241 	push	#0x0a
      000088 4B 50            [ 1]  242 	push	#0x50
      00008A CDr00r00         [ 4]  243 	call	_GPIO_WriteLow
      00008D 5B 03            [ 2]  244 	addw	sp, #3
                                    245 ;	user/main.c: 35: GPIO_WriteLow(LCD_PORT1,LCD_RS); //viết lệnh 
      00008F 4B 40            [ 1]  246 	push	#0x40
      000091 4B 0A            [ 1]  247 	push	#0x0a
      000093 4B 50            [ 1]  248 	push	#0x50
      000095 CDr00r00         [ 4]  249 	call	_GPIO_WriteLow
      000098 5B 03            [ 2]  250 	addw	sp, #3
                                    251 ;	user/main.c: 37: delay_ms(30); //delay LCD để khởi tạo.
      00009A 4B 1E            [ 1]  252 	push	#0x1e
      00009C 4B 00            [ 1]  253 	push	#0x00
      00009E CDr00r0C         [ 4]  254 	call	_delay_ms
      0000A1 85               [ 2]  255 	popw	x
                                    256 ;	user/main.c: 38: LCD_NYB(0x03,0); //Bắt buộc để khởi tạo
      0000A2 4B 00            [ 1]  257 	push	#0x00
      0000A4 4B 03            [ 1]  258 	push	#0x03
      0000A6 CDr01r11         [ 4]  259 	call	_LCD_NYB
      0000A9 85               [ 2]  260 	popw	x
                                    261 ;	user/main.c: 39: delay_ms(5);  
      0000AA 4B 05            [ 1]  262 	push	#0x05
      0000AC 4B 00            [ 1]  263 	push	#0x00
      0000AE CDr00r0C         [ 4]  264 	call	_delay_ms
      0000B1 85               [ 2]  265 	popw	x
                                    266 ;	user/main.c: 40: LCD_NYB(0x03,0); //Bắt buộc để khởi tạo
      0000B2 4B 00            [ 1]  267 	push	#0x00
      0000B4 4B 03            [ 1]  268 	push	#0x03
      0000B6 CDr01r11         [ 4]  269 	call	_LCD_NYB
      0000B9 85               [ 2]  270 	popw	x
                                    271 ;	user/main.c: 41: delay_ms(1);  
      0000BA 4B 01            [ 1]  272 	push	#0x01
      0000BC 4B 00            [ 1]  273 	push	#0x00
      0000BE CDr00r0C         [ 4]  274 	call	_delay_ms
      0000C1 85               [ 2]  275 	popw	x
                                    276 ;	user/main.c: 42: LCD_DATA(0x02,0); //Thiết lập giao diện 4 bit, 1 line và 5*7 font 
      0000C2 4B 00            [ 1]  277 	push	#0x00
      0000C4 4B 02            [ 1]  278 	push	#0x02
      0000C6 CDr00rEB         [ 4]  279 	call	_LCD_DATA
      0000C9 85               [ 2]  280 	popw	x
                                    281 ;	user/main.c: 43: LCD_DATA(0x28,0); //Thiết lập giao diện 4 bit, 2 line và 5*10 font  
      0000CA 4B 00            [ 1]  282 	push	#0x00
      0000CC 4B 28            [ 1]  283 	push	#0x28
      0000CE CDr00rEB         [ 4]  284 	call	_LCD_DATA
      0000D1 85               [ 2]  285 	popw	x
                                    286 ;	user/main.c: 44: LCD_DATA(0x0c,0); //Thiết lập giao diện 4 bit, 2 line và 5*7 font 
      0000D2 4B 00            [ 1]  287 	push	#0x00
      0000D4 4B 0C            [ 1]  288 	push	#0x0c
      0000D6 CDr00rEB         [ 4]  289 	call	_LCD_DATA
      0000D9 85               [ 2]  290 	popw	x
                                    291 ;	user/main.c: 45: LCD_DATA(0x01,0); //Xóa LCD  
      0000DA 4B 00            [ 1]  292 	push	#0x00
      0000DC 4B 01            [ 1]  293 	push	#0x01
      0000DE CDr00rEB         [ 4]  294 	call	_LCD_DATA
      0000E1 85               [ 2]  295 	popw	x
                                    296 ;	user/main.c: 46: LCD_DATA(0x06,0); //Di chuyển trỏ sau khi viết
      0000E2 4B 00            [ 1]  297 	push	#0x00
      0000E4 4B 06            [ 1]  298 	push	#0x06
      0000E6 CDr00rEB         [ 4]  299 	call	_LCD_DATA
      0000E9 85               [ 2]  300 	popw	x
      0000EA 81               [ 4]  301 	ret
                                    302 ;	user/main.c: 48: void LCD_DATA(unsigned char data,unsigned char type){
                                    303 ;	-----------------------------------------
                                    304 ;	 function LCD_DATA
                                    305 ;	-----------------------------------------
      0000EB                        306 _LCD_DATA:
      0000EB 88               [ 1]  307 	push	a
                                    308 ;	user/main.c: 49: delay_ms(10); //TEST LCD
      0000EC 4B 0A            [ 1]  309 	push	#0x0a
      0000EE 4B 00            [ 1]  310 	push	#0x00
      0000F0 CDr00r0C         [ 4]  311 	call	_delay_ms
      0000F3 85               [ 2]  312 	popw	x
                                    313 ;	user/main.c: 50: LCD_NYB(data>>4,type); //WRITE THE UPPER NIBBLE
      0000F4 7B 04            [ 1]  314 	ld	a, (0x04, sp)
      0000F6 4E               [ 1]  315 	swap	a
      0000F7 A4 0F            [ 1]  316 	and	a, #0x0f
      0000F9 6B 01            [ 1]  317 	ld	(0x01, sp), a
      0000FB 7B 05            [ 1]  318 	ld	a, (0x05, sp)
      0000FD 88               [ 1]  319 	push	a
      0000FE 7B 02            [ 1]  320 	ld	a, (0x02, sp)
      000100 88               [ 1]  321 	push	a
      000101 CDr01r11         [ 4]  322 	call	_LCD_NYB
      000104 85               [ 2]  323 	popw	x
                                    324 ;	user/main.c: 51: LCD_NYB(data,type); //WRITE THE LOWER NIBBLE
      000105 7B 05            [ 1]  325 	ld	a, (0x05, sp)
      000107 88               [ 1]  326 	push	a
      000108 7B 05            [ 1]  327 	ld	a, (0x05, sp)
      00010A 88               [ 1]  328 	push	a
      00010B CDr01r11         [ 4]  329 	call	_LCD_NYB
      00010E 85               [ 2]  330 	popw	x
      00010F 84               [ 1]  331 	pop	a
      000110 81               [ 4]  332 	ret
                                    333 ;	user/main.c: 53: void LCD_NYB(unsigned char nyb, char type){
                                    334 ;	-----------------------------------------
                                    335 ;	 function LCD_NYB
                                    336 ;	-----------------------------------------
      000111                        337 _LCD_NYB:
                                    338 ;	user/main.c: 55: temp = (nyb<<1) & 0x1F;
      000111 7B 03            [ 1]  339 	ld	a, (0x03, sp)
      000113 48               [ 1]  340 	sll	a
      000114 A4 1F            [ 1]  341 	and	a, #0x1f
                                    342 ;	user/main.c: 56: GPIO_Write(LCD_PORT,temp);
      000116 88               [ 1]  343 	push	a
      000117 4B 0F            [ 1]  344 	push	#0x0f
      000119 4B 50            [ 1]  345 	push	#0x50
      00011B CDr00r00         [ 4]  346 	call	_GPIO_Write
      00011E 5B 03            [ 2]  347 	addw	sp, #3
                                    348 ;	user/main.c: 57: if(type == 0){
      000120 0D 04            [ 1]  349 	tnz	(0x04, sp)
      000122 26 0D            [ 1]  350 	jrne	00102$
                                    351 ;	user/main.c: 58: GPIO_WriteLow(LCD_PORT1,LCD_RS); //COMMAND MODE
      000124 4B 40            [ 1]  352 	push	#0x40
      000126 4B 0A            [ 1]  353 	push	#0x0a
      000128 4B 50            [ 1]  354 	push	#0x50
      00012A CDr00r00         [ 4]  355 	call	_GPIO_WriteLow
      00012D 5B 03            [ 2]  356 	addw	sp, #3
      00012F 20 0B            [ 2]  357 	jra	00103$
      000131                        358 00102$:
                                    359 ;	user/main.c: 60: GPIO_WriteHigh(LCD_PORT1,LCD_RS); //CHARACTER/DATA MODE
      000131 4B 40            [ 1]  360 	push	#0x40
      000133 4B 0A            [ 1]  361 	push	#0x0a
      000135 4B 50            [ 1]  362 	push	#0x50
      000137 CDr00r00         [ 4]  363 	call	_GPIO_WriteHigh
      00013A 5B 03            [ 2]  364 	addw	sp, #3
      00013C                        365 00103$:
                                    366 ;	user/main.c: 62: GPIO_WriteHigh(LCD_PORT1,LCD_E); //ENABLE LCD DATA LINE
      00013C 4B 80            [ 1]  367 	push	#0x80
      00013E 4B 0A            [ 1]  368 	push	#0x0a
      000140 4B 50            [ 1]  369 	push	#0x50
      000142 CDr00r00         [ 4]  370 	call	_GPIO_WriteHigh
      000145 5B 03            [ 2]  371 	addw	sp, #3
                                    372 ;	user/main.c: 63: delay_ms(1); //SMALL DELAY 
      000147 4B 01            [ 1]  373 	push	#0x01
      000149 4B 00            [ 1]  374 	push	#0x00
      00014B CDr00r0C         [ 4]  375 	call	_delay_ms
      00014E 85               [ 2]  376 	popw	x
                                    377 ;	user/main.c: 64: GPIO_WriteLow(LCD_PORT1,LCD_E); //DISABLE LCD DATA LINE
      00014F 4B 80            [ 1]  378 	push	#0x80
      000151 4B 0A            [ 1]  379 	push	#0x0a
      000153 4B 50            [ 1]  380 	push	#0x50
      000155 CDr00r00         [ 4]  381 	call	_GPIO_WriteLow
      000158 5B 03            [ 2]  382 	addw	sp, #3
      00015A 81               [ 4]  383 	ret
                                    384 ;	user/main.c: 68: void LCD_LINE(char line){
                                    385 ;	-----------------------------------------
                                    386 ;	 function LCD_LINE
                                    387 ;	-----------------------------------------
      00015B                        388 _LCD_LINE:
                                    389 ;	user/main.c: 69: switch(line){
      00015B 7B 03            [ 1]  390 	ld	a, (0x03, sp)
      00015D A1 00            [ 1]  391 	cp	a, #0x00
      00015F 27 0D            [ 1]  392 	jreq	00102$
      000161 7B 03            [ 1]  393 	ld	a, (0x03, sp)
      000163 A1 01            [ 1]  394 	cp	a, #0x01
      000165 27 07            [ 1]  395 	jreq	00102$
      000167 7B 03            [ 1]  396 	ld	a, (0x03, sp)
      000169 A1 02            [ 1]  397 	cp	a, #0x02
      00016B 27 0A            [ 1]  398 	jreq	00103$
      00016D 81               [ 4]  399 	ret
                                    400 ;	user/main.c: 71: case 1:
      00016E                        401 00102$:
                                    402 ;	user/main.c: 72: LCD_DATA(0x80,0);
      00016E 4B 00            [ 1]  403 	push	#0x00
      000170 4B 80            [ 1]  404 	push	#0x80
      000172 CDr00rEB         [ 4]  405 	call	_LCD_DATA
      000175 85               [ 2]  406 	popw	x
                                    407 ;	user/main.c: 73: break;
      000176 81               [ 4]  408 	ret
                                    409 ;	user/main.c: 74: case 2:
      000177                        410 00103$:
                                    411 ;	user/main.c: 75: LCD_DATA(0xC0,0);
      000177 4B 00            [ 1]  412 	push	#0x00
      000179 4B C0            [ 1]  413 	push	#0xc0
      00017B CDr00rEB         [ 4]  414 	call	_LCD_DATA
      00017E 85               [ 2]  415 	popw	x
                                    416 ;	user/main.c: 77: }
      00017F 81               [ 4]  417 	ret
                                    418 	.area CODE
      000180                        419 ___str_0:
      000180 43 68 75 6E 67 20 44   420 	.ascii "Chung Dinh"
             69 6E 68
      00018A 00                     421 	.db 0x00
      00018B                        422 ___str_1:
      00018B 31 32 2F 30 35 2F 31   423 	.ascii "12/05/1994"
             39 39 34
      000195 00                     424 	.db 0x00
                                    425 	.area INITIALIZER
                                    426 	.area CABS (ABS)
